From ecf3a78c92ff49e1322d5e7467c54081606e9e8d Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 16 Jan 2014 18:24:53 -0700
Subject: ws2_32: Add asynchronous support for TransmitFile.

---
 dlls/ws2_32/socket.c     |   86 +++++++++++++++++++++++++++++++++++++++++++---
 dlls/ws2_32/tests/sock.c |   47 ++++++++++++++++++++++---
 2 files changed, 124 insertions(+), 9 deletions(-)

diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index 1faf443..2323e3d 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -363,6 +363,18 @@ typedef struct ws2_accept_async
     struct ws2_async    *read;
 } ws2_accept_async;
 
+typedef struct ws2_transmitfile_async
+{
+    HANDLE                  socket;
+    HANDLE                  file;
+    DWORD                   total_bytes;
+    DWORD                   bytes_per_send;
+    LPOVERLAPPED            user_overlapped;
+    LPTRANSMIT_FILE_BUFFERS buffers;
+    DWORD                   flags;
+    ULONG_PTR               cvalue;
+} ws2_transmitfile_async;
+
 /****************************************************************/
 
 /* ----------------------------------- internal data */
@@ -2499,6 +2511,16 @@ static BOOL WS2_transmitfile_base( SOCKET s, HANDLE h, DWORD total_bytes, DWORD
         buffer = HeapAlloc( GetProcessHeap(), 0, bytes_per_send );
         if (!buffer) goto cleanup;
 
+        /* handle the overlapped offset */
+        if (overlapped)
+        {
+            LARGE_INTEGER offset;
+
+            offset.u.LowPart = overlapped->u.s.Offset;
+            offset.u.HighPart = overlapped->u.s.OffsetHigh;
+            SetFilePointerEx( h, offset, NULL, FILE_BEGIN );
+        }
+
         /* read and send the data from the file */
         do
         {
@@ -2531,6 +2553,32 @@ cleanup:
 }
 
 /***********************************************************************
+ *     WS2_async_transmitfile           (INTERNAL)
+ * 
+ * Asynchronous callback for overlapped TransmitFile operations.
+ */
+static NTSTATUS WS2_async_transmitfile( void *arg, IO_STATUS_BLOCK *iosb, ULONG reserved )
+{
+    struct ws2_transmitfile_async *wsa = arg;
+    BOOL ret;
+
+    ret = WS2_transmitfile_base( HANDLE2SOCKET(wsa->socket), wsa->file, wsa->total_bytes, wsa->bytes_per_send,
+                                 wsa->user_overlapped, wsa->buffers, wsa->flags );
+    if (!ret)
+        iosb->u.Status = wsaErrStatus();
+    else
+        iosb->u.Status = STATUS_SUCCESS;
+    iosb->Information = 0;
+
+    if (wsa->user_overlapped->hEvent)
+        SetEvent(wsa->user_overlapped->hEvent);
+    if (wsa->cvalue)
+        WS_AddCompletion( HANDLE2SOCKET(wsa->socket), wsa->cvalue, iosb->u.Status, iosb->Information );
+
+    return iosb->u.Status;
+}
+
+/***********************************************************************
  *     TransmitFile
  */
 static BOOL WINAPI WS2_TransmitFile( SOCKET s, HANDLE h, DWORD total_bytes, DWORD bytes_per_send,
@@ -2538,7 +2586,9 @@ static BOOL WINAPI WS2_TransmitFile( SOCKET s, HANDLE h, DWORD total_bytes, DWOR
 {
     union generic_unix_sockaddr uaddr;
     unsigned int uaddrlen = sizeof(uaddr);
-    int fd;
+    IO_STATUS_BLOCK *iosb = (IO_STATUS_BLOCK *)overlapped;
+    struct ws2_transmitfile_async *wsa;
+    int status, fd;
 
     TRACE("(%lx, %p, %d, %d, %p, %p, %d)\n", s, h, total_bytes, bytes_per_send, overlapped, buffers, flags );
     if (s == INVALID_SOCKET)
@@ -2560,9 +2610,37 @@ static BOOL WINAPI WS2_TransmitFile( SOCKET s, HANDLE h, DWORD total_bytes, DWOR
     if (!overlapped)
         return WS2_transmitfile_base( s, h, total_bytes, bytes_per_send, overlapped, buffers, flags );
 
-    FIXME("(%lx, %p, %d, %d, %p, %p, %d): stub !\n", s, h, total_bytes, bytes_per_send, overlapped, buffers,
-                                                     flags );
-    WSASetLastError( WSAEOPNOTSUPP );
+    iosb->u.Status = STATUS_PENDING;
+    iosb->Information = 0;
+    if (!(wsa = HeapAlloc( GetProcessHeap(), 0, sizeof(*wsa) )))
+    {
+        SetLastError( WSAEFAULT );
+        return FALSE;
+    }
+    wsa->socket = SOCKET2HANDLE(s);
+    wsa->file = h;
+    wsa->total_bytes = total_bytes;
+    wsa->bytes_per_send = bytes_per_send;
+    wsa->user_overlapped = overlapped;
+    wsa->buffers = buffers;
+    wsa->flags = flags;
+    wsa->cvalue = (((ULONG_PTR)overlapped->hEvent & 1) == 0) ? (ULONG_PTR)overlapped : 0;
+
+    SERVER_START_REQ( register_async )
+    {
+        req->type           = ASYNC_TYPE_WRITE;
+        req->async.handle   = wine_server_obj_handle( SOCKET2HANDLE(s) );
+        req->async.callback = wine_server_client_ptr( WS2_async_transmitfile );
+        req->async.iosb     = wine_server_client_ptr( iosb );
+        req->async.arg      = wine_server_client_ptr( wsa );
+        status = wine_server_call( req );
+    }
+    SERVER_END_REQ;
+
+    if(status != STATUS_PENDING)
+        HeapFree( GetProcessHeap(), 0, wsa );
+
+    SetLastError( NtStatusToWSAError(status) );
     return FALSE;
 }
 
diff --git a/dlls/ws2_32/tests/sock.c b/dlls/ws2_32/tests/sock.c
index 79052ab..652f75f 100644
--- a/dlls/ws2_32/tests/sock.c
+++ b/dlls/ws2_32/tests/sock.c
@@ -6334,15 +6334,15 @@ end:
         closesocket(connector2);
 }
 
-#define compare_file(h,s) compare_file2(h,s,__FILE__,__LINE__)
+#define compare_file(h,s,o) compare_file2(h,s,o,__FILE__,__LINE__)
 
-static void compare_file2(HANDLE handle, SOCKET sock, const char *file, int line)
+static void compare_file2(HANDLE handle, SOCKET sock, int offset, const char *file, int line)
 {
     char buf1[256], buf2[256];
     BOOL success;
     int i = 0;
 
-    SetFilePointer(handle, 0, NULL, FILE_BEGIN);
+    SetFilePointer(handle, offset, NULL, FILE_BEGIN);
     while (1)
     {
         DWORD n1 = 0, n2 = 0;
@@ -6372,10 +6372,13 @@ static void test_TransmitFile(void)
     TRANSMIT_FILE_BUFFERS buffers;
     SOCKET client, server, dest;
     DWORD num_bytes, err;
+    WSAOVERLAPPED ov;
     char buf[256];
     int iret, len;
     BOOL bret;
 
+    memset( &ov, 0, sizeof(ov) );
+
     /* Setup sockets for testing TransmitFile */
     client = socket(AF_INET, SOCK_STREAM, 0);
     server = socket(AF_INET, SOCK_STREAM, 0);
@@ -6473,7 +6476,7 @@ static void test_TransmitFile(void)
     /* Test TransmitFile with only file data */
     bret = pTransmitFile(client, file, 0, 0, NULL, NULL, 0);
     ok(bret, "TransmitFile failed unexpectedly.\n");
-    compare_file(file, dest);
+    compare_file(file, dest, 0);
 
     /* Test TransmitFile with both file and buffer data */
     buffers.Head = &header_msg[0];
@@ -6486,11 +6489,44 @@ static void test_TransmitFile(void)
     iret = recv(dest, buf, sizeof(header_msg)+1, 0);
     ok(memcmp(buf, &header_msg[0], sizeof(header_msg)+1) == 0,
        "TransmitFile header buffer did not match!\n");
-    compare_file(file, dest);
+    compare_file(file, dest, 0);
     iret = recv(dest, buf, sizeof(footer_msg)+1, 0);
     ok(memcmp(buf, &footer_msg[0], sizeof(footer_msg)+1) == 0,
        "TransmitFile footer buffer did not match!\n");
 
+    /* Test overlapped TransmitFile */
+    ov.hEvent = CreateEventW(NULL, FALSE, FALSE, NULL);
+    if (ov.hEvent == INVALID_HANDLE_VALUE)
+    {
+        skip("Could not create event object, some tests will be skipped. errno = %d\n", GetLastError());
+        goto cleanup;
+    }
+    SetFilePointer(file, 0, NULL, FILE_BEGIN);
+    bret = pTransmitFile(client, file, 0, 0, &ov, NULL, 0);
+    err = WSAGetLastError();
+    ok(!bret, "TransmitFile succeeded unexpectedly.\n");
+    ok(err == ERROR_IO_PENDING, "TransmitFile triggered unexpected errno (%d != %d)\n", err, ERROR_IO_PENDING);
+    iret = WaitForSingleObject(ov.hEvent, 100);
+    ok(iret == WAIT_OBJECT_0, "Overlapped TransmitFile failed.\n");
+    compare_file(file, dest, 0);
+
+    /* Test overlapped TransmitFile w/ start offset */
+    ov.hEvent = CreateEventW(NULL, FALSE, FALSE, NULL);
+    if (ov.hEvent == INVALID_HANDLE_VALUE)
+    {
+        skip("Could not create event object, some tests will be skipped. errno = %d\n", GetLastError());
+        goto cleanup;
+    }
+    SetFilePointer(file, 0, NULL, FILE_BEGIN);
+    ov.Offset = 10;
+    bret = pTransmitFile(client, file, 0, 0, &ov, NULL, 0);
+    err = WSAGetLastError();
+    ok(!bret, "TransmitFile succeeded unexpectedly.\n");
+    ok(err == ERROR_IO_PENDING, "TransmitFile triggered unexpected errno (%d != %d)\n", err, ERROR_IO_PENDING);
+    iret = WaitForSingleObject(ov.hEvent, 100);
+    ok(iret == WAIT_OBJECT_0, "Overlapped TransmitFile failed.\n");
+    compare_file(file, dest, 10);
+
     /* Test TransmitFile with a UDP datagram socket */
     closesocket(client);
     client = socket(AF_INET, SOCK_DGRAM, 0);
@@ -6501,6 +6537,7 @@ static void test_TransmitFile(void)
 
 cleanup:
     CloseHandle(file);
+    CloseHandle(ov.hEvent);
     closesocket(client);
     closesocket(server);
 }
-- 
1.7.9.5

